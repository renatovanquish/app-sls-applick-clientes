enum UserStatus {
  DEFAULT
  PREREGISTER
  SUSPENDED
  ACTIVE
}

type User
  @model(
    mutations: {create: "createUser", update: "updateUser", delete: "deleteUser"},
    queries: {get: "getUser", list: "listUsers"},
    subscriptions: null
    )
  @auth(rules: [
    {allow: owner, identityClaim: "username", provider: userPools, ownerField: "id"},
    {allow: groups, provider: userPools, groups: ["Admin", "Clinica", "Profissional", "Colaborador"], operations: [read, update, create, delete]},
    {allow: private, provider: userPools, operations: [create]},
    {allow: public, provider: apiKey, operations: [create]}
    ]) {
  id: ID! @primaryKey
  name: String!
  email: AWSEmail @index(name: "userByEmail", queryField: "getUserByEmail")
  phone: AWSPhone @index(name: "userByPhone", queryField: "getUserByPhone")
  status: UserStatus
  active: Boolean
  avatar: String
  search: String
  createdAt: AWSDateTime
  profile: Profile @hasOne(fields: ["id"])
  groups: [GroupUser] @hasMany(indexName: "groupsByUser", fields: ["id"])
  logs: [Log] @hasMany(indexName: "logsByUser", fields: ["id"])
  addresses: [Address] @hasMany(indexName: "addressesByUser", fields: ["id"])
  payMethods: [PayMethod] @hasMany(indexName: "payMethodsByUser", fields: ["id"])
  relationsLink: [RelationLink] @hasMany(indexName: "relationsLinkByUser", fields: ["id"])
  carts: [Cart] @hasMany(indexName: "cartsByUser", fields: ["id"])
  ordersByCreatedAt: [Order] @hasMany(indexName: "ordersByUserCreatedAt", fields: ["id"])
  ordersByStatusCreatedAt: [Order] @hasMany(indexName: "ordersByUserStatusCreatedAt", fields: ["id"])
}

enum GenderOptions {
  M
  F
  UNKNOWN
}

enum DocTypes {
  CPF
  CNPJ
  PASSPORT
}

type Profile
  @model(
    mutations: {create: "createProfile", update: "updateProfile", delete: "deleteProfile"},
    queries: {get: "getProfile", list: null},
    subscriptions: null
  )
  @auth(rules: [
    {allow: owner, identityClaim: "username", provider: userPools, ownerField: "userID", operations: [create, update, delete, read]},
    {allow: groups, provider: userPools, groups: ["Admin", "Clinica", "Profissional", "Colaborador"], operations: [read, update, create, delete]},
    {allow: private, provider: userPools, operations: [create]},
    {allow: public, provider: apiKey, operations: [create]}
  ]) {
  userID: ID! @primaryKey
  user: User @hasOne(fields: ["userID"])
  doc: String @index(name: "profileByDoc", queryField: "getProfileByDoc")
  docType: DocTypes
  docProfessionType: String
  docProfession: String
  profession: String
  specialties: String
  subSpecialties: String
  bio: String
  gender: GenderOptions
  birth: AWSDate
  notes: String
  urlUserName: String
  urlEnable: Boolean
  allowViewEmail: Boolean
  allowViewPhone: Boolean
  allowCookiesPreference: Boolean
  allowCookiesStatistic: Boolean
  pix: String
  zipCodeCoverage: [String]
  schedulesSunday: [String]
  schedulesMonday: [String]
  schedulesTuesday: [String]
  schedulesWednesday: [String]
  schedulesThursday: [String]
  schedulesFriday: [String]
  schedulesSaturday: [String]
  regionsConfig: String
  regionSunday: String
  regionMonday: String
  regionTuesday: String
  regionWednesday: String
  regionThursday: String
  regionFriday: String
  regionSaturday: String
  customerPagarmeID: String
  companyID: ID @index(name: "profilesByCompany", queryField: "listProfilesByCompany")
  company: Company @hasOne(fields: ["companyID"])
  companyHomeCare: Boolean
  companyCampaign: Boolean
  companyAdmin: Boolean
}


type TempAux
  @model(
    mutations: {create: "createTempAux", update: null, delete: "deleteTempAux"},
    queries: {get: "getTempAux", list: null},
    subscriptions: null
  )
  @auth(rules: [
    {allow: private, provider: userPools, operations: [create, read, delete]},
    {allow: public, provider: apiKey, operations: [create, read, delete]}
  ]) {
  id: ID! @primaryKey
  name: String
  doc: String
  birth: AWSDate
}


type GroupUser
  @model(
    mutations: {create: "createGroupUser", update: null, delete: "deleteGroupUser"},
    queries: {get: null, list: null},
    subscriptions: null
  )
  @auth(rules: [
    {allow: groups, provider: userPools, groups: ["Admin"]},
    {allow: private, provider: userPools, operations: [read]},
    {allow: public, provider: apiKey, operations: [read]}
  ]) {
  id: ID! @primaryKey
  group: String! @index(name: "usersByGroup", queryField: "listUsersByGroup", sortKeyFields: ["userID"])
  userID: ID! @index(name: "groupsByUser", queryField: "listGroupsByUser", sortKeyFields: ["group"])
  user: User @hasOne(fields: ["userID"])
  profileID: ID!
  profile: Profile @hasOne(fields: ["profileID"])
  createdAt: AWSDateTime
}


type Address
  @model(
    mutations: {create: "createAddress", update: "updateAddress", delete: "deleteAddress"},
    queries: {get: null, list: null},
    subscriptions: null
  )
  @auth(rules: [
    {allow: owner, identityClaim: "username", provider: userPools, ownerField: "userID", operations: [create, update, delete, read]},
    {allow: groups, provider: userPools, groups: ["Admin", "Clinica", "Profissional", "Colaborador"], operations: [read, update, create, delete]},
    ]) {
  id: ID! @primaryKey
  userID: ID! @index(name: "addressesByUser", queryField: "listAddressesByUser")
  name: String
  reference: String
  street: String
  number: String
  complement: String
  zipcode: String
  neighborhood: String
  city: String
  state: String
  country: String
  addressPagarmeID: String
}

enum PaymentMethods {
  CREDIT
  DEBIT
  PIX
  GATEWAY
  CASH
  ONDELIVERY
  VACINASNET
}

type PayMethod
  @model(
    mutations: {create: "createPayMethod", update: "updatePayMethod", delete: "deletePayMethod"},
    queries: {get: null, list: null},
    subscriptions: null)
  @auth(rules: [
    {allow: owner, identityClaim: "username", provider: userPools, ownerField: "userID", operations: [create, update, delete, read]},
    {allow: groups, provider: userPools, groups: ["Admin", "Clinica", "Profissional", "Colaborador"], operations: [read, update, create, delete]},
  ]) {
  id: ID! @primaryKey
  userID: ID! @index(name: "payMethodsByUser", queryField: "listPayMethodsByUser")
  method: PaymentMethods!
  number: String
  holderName: String
  holderDocument: String
  expMonth: Int
  expYear: Int
  cvv: String
  brand: String
  label: String
  cardPagarmeID: String
}

enum LogSource {
  APP
}

type Log @model(mutations: {create: "createLog", update: null, delete: null}, queries: {get: null, list: null}, subscriptions: null)
@auth(rules: [
  {allow: owner, identityClaim: "username", provider: userPools, ownerField: "userID", operations: [create, read]},
  {allow: groups, provider: userPools, groups: ["Admin", "Clinica", "Profissional", "Colaborador"], operations: [read, create]},
  ]) {
  id: ID! @primaryKey
  userID: ID! @index(name: "logsByUser", queryField: null) @index(name: "logsByUserCreatedAt", queryField: "listLogsByUserCreatedAt", sortKeyFields: ["createdAt"]) @index(name: "logsByUserTagCreatedAt", queryField: "listLogsByUserTagCreatedAt", sortKeyFields: ["tag", "createdAt"])
  tag: String! @index(name: "logsByTagCreatedAt", queryField: "listLogsByTagCreatedAt", sortKeyFields: ["createdAt"])
  source: LogSource! @index(name: "logsBySourceCreatedAt", queryField: "listLogsBySourceCreatedAt", sortKeyFields: ["createdAt"])
  notes: String
  message: String
  page: String
  manufacturer: String
  model: String
  osName: String
  osVersion: String
  platform: String
  uuid: String
  ip: String
  city: String
  region: String
  country: String
  provider: String
  lat: Float
  lng: Float
  createdAt: AWSDateTime
  user: User @belongsTo(fields: ["userID"])
}

enum ConfigValidationModes {
  CODE
  LINK
}

type Config
  @model(
    mutations: {create: "createConfig", update: "updateConfig", delete: null},
    queries: {get: "getConfig", list: null},
    subscriptions: null
  )
  @auth(rules: [
    {allow: groups, provider: userPools, groups: ["Admin"]},
    {allow: private, provider: userPools, operations: [read]},
    {allow: public, provider: apiKey, operations: [read]}
  ]) {
  id: ID! @primaryKey
  validationMode: ConfigValidationModes!
  googleAnalyticsID: String
  googleSiteVerification: String
  inviteSubject: String
  inviteMessage: String
  inviteSMS: String
  facebook: String
  twitter: String
  instagram: String
  infoFooter: String
  minValueOrder: Float
  phoneOrders: AWSPhone
  allowPayOnDelivery: Boolean
  allowLocalPickup: Boolean
  deliveryOnSunday: AWSTime
  deliveryOnMonday: AWSTime
  deliveryOnTuesday: AWSTime
  deliveryOnWednesday: AWSTime
  deliveryOnThursday: AWSTime
  deliveryOnFriday: AWSTime
  deliveryOnSaturday: AWSTime
  deliveryOffSunday: AWSTime
  deliveryOffMonday: AWSTime
  deliveryOffTuesday: AWSTime
  deliveryOffWednesday: AWSTime
  deliveryOffThursday: AWSTime
  deliveryOffFriday: AWSTime
  deliveryOffSaturday: AWSTime
  showNotesCart: Boolean
  notesCart: String
  soundOnNewOrder: Boolean
}

enum InviteStatus {
  SENT
  CANCELED
  ACCEPTED
}

type Invite @model(mutations: {create: "createInvite", update: "updateInvite", delete: "deleteInvite"}, queries: {get: null, list: "listInvites"}, subscriptions: null)
@auth(rules: [
  {allow: groups, provider: userPools, groups: ["Admin"]},
  {allow: private, provider: userPools, operations: [read]},
  {allow: public, provider: apiKey, operations: [read, update]}
]) {
  id: ID! @primaryKey
  name: String!
  description: String
  email: String @index(name: "InvitesByEmail", queryField: "listInvitesByEmail")
  phone: String @index(name: "InvitesByPhone", queryField: "listInvitesByPhone")
  groups: [String]
  status: InviteStatus! @index(name: "InvitesByStatus", queryField: "listInvitesByStatusCreatedAt", sortKeyFields: ["createdAt"])
  createdAt: AWSDateTime
}

type Coupon
  @model(
    mutations: {create: "createCoupon", update: "updateCoupon", delete: "deleteCoupon"},
    queries: {get: "getCoupon", list: "listCoupons"},
    subscriptions: null)
  @auth(rules: [
    {allow: groups, provider: userPools, groups: ["Admin"]},
    {allow: private, provider: userPools, operations: [read]},
    {allow: public, provider: apiKey, operations: [read, update]}
  ]) {
  id: ID! @primaryKey
  name: String!
  description: String
  code: String! @index(name: "couponsByCode", queryField: "listCouponsByCode")
  start: AWSDate
  expiration: AWSDate
  discountPercentage: Int
  discountValue: Float
  qtyLimit: Int
  qtyUsed: Int
  qtyProduct: Int
  qtyProductUsed: Int
  search: String
  products: [CouponProduct] @hasMany(indexName: "productsByCoupon", fields: ["id"])
  couponUsed: [CouponUsed] @hasMany(indexName: "usedByCoupon", fields: ["id"])
}

type CouponProduct
  @model(
    mutations: {create: "createCouponProduct", update: "updateCouponProduct", delete: "deleteCouponProduct"},
    queries: {get: null, list: null},
    subscriptions: null
  )
  @auth(rules: [
    {allow: groups, provider: userPools, groups: ["Admin"]},
    {allow: private, provider: userPools, operations: [read]},
    {allow: public, provider: apiKey, operations: [read, update, create, delete]}
  ]) {
  id: ID! @primaryKey
  couponID: ID! @index(name: "productsByCoupon", queryField: "listProductsByCoupon")
  productID: ID!
  price: Float
  limit: Int
  product: Product @hasOne(fields: ["productID"])
}

type CouponUsed
  @model(
    mutations: {create: "createCouponUsed", update: null, delete: null},
    queries: {get: null, list: null},
    subscriptions: null
  )
  @auth(rules: [
    {allow: private, provider: userPools, operations: [read]},
    {allow: public, provider: apiKey, operations: [read, create]}
  ]) {
  id: ID! @primaryKey
  couponID: ID! @index(name: "usedByCoupon", queryField: "listUsedByCoupon") @index(name: "usedByCouponUser", queryField: "listUsedByCouponUser", sortKeyFields: ["userID"])
  coupon: Coupon @belongsTo(fields: ["couponID"])
  userID: ID!
  user: User @hasOne(fields: ["userID"])
  qty: Int
}


type Folder @model(mutations: {create: "createFolder", update: "updateFolder", delete: "deleteFolder"}, queries: {get: null, list: "listFolders"}, subscriptions: null) @auth(rules: [{allow: groups, provider: userPools, groups: ["Admin"]}, {allow: private, provider: userPools, operations: [read]}]) {
  id: ID! @primaryKey
  name: String! @index(name: "foldersByName", queryField: "listFoldersByName")
}

enum MidiaTypes {
  AUDIO
  VIDEO
  IMAGE
  PDF
  DOC
  XLS
  FILE
  ZIP
}

type Midia @model(mutations: {create: "createMidia", update: "updateMidia", delete: "deleteMidia"}, queries: {get: null, list: "listMidias"}, subscriptions: null) @auth(rules: [{allow: groups, provider: userPools, groups: ["Admin"]}, {allow: private, provider: userPools, operations: [read]}, {allow: public, provider: apiKey, operations: [read]}]) {
  id: ID! @primaryKey
  key: String! @index(name: "MidiaByKey", queryField: "listMidiaByKey")
  type: MidiaTypes
  title: String
  subTitle: String
  description: String
  identifyText: String
}

enum RelationTypes {
  CONTACT
  DOCUMENT
}

enum RelationModes {
  PRIVATE
  GROUP
}

enum RelationStatus {
  STANDBY
  ABORTED
  STARTED
  FINALIZED
  INPROGRESS
  INANALYZE
  ACTIVE
  ARCHIVED
}

type Relation @model(mutations: {create: "createRelation", update: "updateRelation", delete: "deleteRelation"}, queries: {get: "getRelation", list: "listRelations"}, subscriptions: null) @auth(rules: [{allow: owner, identityClaim: "username", ownerField: "members", operations: [read]}, {allow: owner, identityClaim: "username", ownerField: "admins", operations: [create, delete, update, read]}, {allow: public, provider: apiKey, operations: [read, create, delete, update]}]) {
  id: ID! @primaryKey
  type: RelationTypes! @index(name: "relationsByTypeUpdatedAt", queryField: "listRelationsByTypeUpdatedAt", sortKeyFields: ["updatedAt"]) @index(name: "relationsByTypeModeUpdatedAt", queryField: "listRelationsByTypeModeUpdatedAt", sortKeyFields: ["mode", "updatedAt"]) @index(name: "relationsByTypeStatusUpdatedAt", queryField: "listRelationsByTypeStatusUpdatedAt", sortKeyFields: ["status", "updatedAt"])
  mode: RelationModes!
  name: String
  description: String
  avatar: String
  reference: String
  members: [String!]!
  admins: [String!]!
  updatedAt: AWSDateTime
  status: RelationStatus! @index(name: "relationsByStatusUpdatedAt", queryField: "listRelationsByStatusUpdatedAt", sortKeyFields: ["updatedAt"])
  search: String
  relationsLink: [RelationLink] @hasMany(indexName: "relationsLinkByRelation", fields: ["id"])
  messages: [Message] @hasMany(indexName: "messagesByRelation", fields: ["id"])
}

type RelationLink
  @model(
    mutations: {create: "createRelationLink", update: "updateRelationLink", delete: "deleteRelationLink"},
    queries: {get: null, list: "listRelationsLink"},
    subscriptions: null)
  @auth(rules: [
    {allow: owner, identityClaim: "username", provider: userPools, ownerField: "userID"},
    {allow: public, provider: apiKey, operations: [create, delete, update, read]}
  ]) {
  id: ID! @primaryKey
  userID: ID! @index(name: "relationsLinkByUser") @index(name: "relationsLinkByUserTypeNotifyUpdatedAt", queryField: "listRelationsLinkByUserTypeNotifyUpdatedAt", sortKeyFields: ["type", "notify", "updatedAt"])
  user: User @belongsTo(fields: ["userID"])
  relationID: ID! @index(name: "relationsLinkByRelation") @index(name: "relationsLinkByRelationUser", queryField: "listRelationsLinkByRelationUser", sortKeyFields: ["userID"])
  relation: Relation @belongsTo(fields: ["relationID"])
  type: String!
  notify: Int!
  updatedAt: AWSDateTime
  search: String
  percentage: Int
}

enum MessagesTypes {
  ALERT
  TEXT
  AUDIO
  VIDEO
  IMAGE
  LOCATION
}

type Message
  @model(
    mutations: {create: "createMessage", delete: "deleteMessage"},
    queries: null,
    subscriptions: null)
  @auth(rules: [
    {allow: owner, identityClaim: "username", provider: userPools, ownerField: "userID"},
    {allow: public, provider: apiKey, operations: [create, delete, read]},
    {allow: private, operations: [update]}
  ]) {
  id: ID! @primaryKey
  relationID: ID @index(name: "messagesByRelation") @index(name: "messagesByRelationCreatedAt", queryField: "listMessagesByRelationCreatedAt", sortKeyFields: ["createdAt"])
  relation: Relation @belongsTo(fields: ["relationID"])
  userID: ID! @index(name: "messagesByUser") @index(name: "messagesByUserCreatedAt", queryField: "listMessagesByUserCreatedAt", sortKeyFields: ["createdAt"])
  user: User @hasOne(fields: ["userID"])
  type: MessagesTypes!
  content: String
  search: String
  identityId: String
  createdAt: AWSDateTime
  status: String @index(name: "messagesByStatusCreatedAt", queryField: "listMessagesByStatusCreatedAt", sortKeyFields: ["createdAt"])
}

type Menu @model(mutations: {create: "createMenu", update: "updateMenu", delete: "deleteMenu"}, queries: {get: "getMenu", list: "listMenus"}, subscriptions: null) @auth(rules: [{allow: groups, provider: userPools, groups: ["Admin"]}, {allow: private, provider: userPools, operations: [read]}, {allow: public, provider: apiKey, operations: [read]}]) {
  id: ID! @primaryKey
  alias: String! @index(name: "menusByAliasOrder", queryField: "listMenusByAliasOrder", sortKeyFields: ["order"])
  order: Int!
  title: String
  description: String
  orderDesc: Boolean
  thumbnail: String
  thumbnailSrc: String
  thumbnailCropper: String
  showDescriptionPage: String
  showThumbnailPage: String
  hide: Boolean
}

enum PageType {
  CONTENT
  COMMERCE
}

enum PageStatus {
  ON
  OFF
}

enum PageChangeFreq {
  NEVER
  YEARLY
  MONTHLY
  WEEKLY
  DAILY
  HOURLY
  ALWAYS
}

enum PagePriority {
  P0
  P1
  P2
  P3
  P4
  P5
  P6
  P7
  P8
  P9
  P10
}

enum PageOptionTitle {
  L
  R
  C
  N
}

enum PageSideColumn {
  L
  R
  N
}

enum PageOptionSideColumn {
  CART_CONTENT_TAGS
  CART_CONTENT
  CONTENT_CART
  MENU_CONTENT_TAGS
  MENU_CONTENT
  TAGS_CONTENT
  CONTENT_MENU_TAGS
  CONTENT_MENU
  CONTENT_TAGS
  CONTENT_BACK
  BACK_CONTENT
}

type Page @model(mutations: {create: "createPage", update: "updatePage", delete: "deletePage"}, queries: {get: "getPage", list: "listPages"}, subscriptions: null)
@auth(rules: [
  {allow: groups, provider: userPools, groups: ["Admin"]},
  {allow: private, provider: userPools, operations: [read]},
  {allow: public, provider: apiKey, operations: [read, create]}
  ]) {
  id: ID! @primaryKey
  alias: String! @index(name: "pagesByAliasCreatedAt", queryField: "listPagesByAliasCreatedAt", sortKeyFields: ["createdAt"])
  status: PageStatus! @index(name: "pagesByStatusMenuOrder", queryField: "listPagesByStatusMenuOrder", sortKeyFields: ["menu", "order"])
  type: PageType!
  menu: ID! @index(name: "pagesByMenuOrder", queryField: "listPagesByMenuOrder", sortKeyFields: ["order"])
  menuProps: Menu @hasOne(fields: ["menu"])
  order: Int!
  title: String!
  titlePadX: String
  titlePadY: String
  description: String
  content: String
  contentPadX: String
  contentPadY: String
  tags: [String]
  thumbnail: String
  thumbnailSrc: String
  thumbnailCropper: String
  changeFreq: PageChangeFreq
  priority: PagePriority
  optionTitle: PageOptionTitle
  sideColumn: PageSideColumn
  sideColumnPadX: String
  sideColumnPadY: String
  sideColumnContent: String
  optionSideColumn: PageOptionSideColumn
  hideFooter: Boolean
  hideInMenu: Boolean
  createdAt: AWSDateTime
  search: String
  blocks: [Block] @hasMany(indexName: "blocksByPage", fields: ["id"])
}

type Block
  @model(
    mutations: {create: "createBlock", update: "updateBlock", delete: "deleteBlock"},
    queries: {get: "getBlock", list: "listBlocks"},
    subscriptions: null
  )
  @auth(rules: [
    {allow: groups, provider: userPools, groups: ["Admin"]},
    {allow: private, provider: userPools, operations: [read]},
    {allow: public, provider: apiKey, operations: [read]}
  ]) {
  id: ID! @primaryKey
  pageID: ID! @index(name: "blocksByPage", queryField: "listBlocksByPage") @index(name: "blocksByPageOrder", queryField: "listBlocksByPageOrder", sortKeyFields: ["order"])
  order: Int!
  component: String!
  content: String!
  config: String
  page: Page @belongsTo(fields: ["pageID"])
}

type Category
  @model(
    mutations: {create: "createCategory", update: "updateCategory", delete: "deleteCategory"},
    queries: {get: "getCategory", list: "listCategories"},
    subscriptions: null
  )
  @auth(rules: [
    {allow: groups, provider: userPools, groups: ["Admin"]},
    {allow: private, provider: userPools, operations: [read]},
    {allow: public, provider: apiKey, operations: [read]}
  ]) {
  id: ID! @primaryKey
  alias: String! @index(name: "categoryByAliasOrder", queryField: "listCategoryByAliasOrder", sortKeyFields: ["order"])
  order: Int!
  title: String
  description: String
  thumbnail: String
  thumbnailSrc: String
  thumbnailCropper: String
  hide: Boolean
  isSub: Boolean
}

type Product
  @model(
    mutations: {create: "createProduct", update: "updateProduct", delete: "deleteProduct"},
    queries: {get: "getProduct", list: "listProducts"},
    subscriptions: null
  )
  @auth(rules: [
    {allow: groups, provider: userPools, groups: ["Admin"]},
    {allow: private, provider: userPools, operations: [read]},
    {allow: public, provider: apiKey, operations: [read]}
  ]) {
  id: ID! @primaryKey
  alias: String! @index(name: "productsByAliasCreatedAt", queryField: "listProductsByAliasCreatedAt", sortKeyFields: ["createdAt"])
  status: PageStatus! @index(name: "productsByStatusCategoryName", queryField: "listProductsByStatusCategoryName", sortKeyFields: ["category", "name"])
  category: ID! @index(name: "productsByCategorySubCategoryName", queryField: "listProductsByCategorySubCategoryName", sortKeyFields: ["subCategory", "name"])
  categoryProps: Category @hasOne(fields: ["category"])
  subCategory: ID!
  subCategoryProps: Category @hasOne(fields: ["subCategory"])
  code: String
  name: String!
  type: String
  description: String
  manufacturer: String
  contentTitle: String
  contentTitle2: String
  contentTitle3: String
  content: String
  content2: String
  content3: String
  tags: [String]
  changeFreq: PageChangeFreq
  priority: PagePriority
  price_of: Float
  price: Float!
  qty: Int
  stockControl: Boolean
  applicationTime: Int
  applicationTimeChild: Int
  photo1: String
  photo2: String
  photo3: String
  photo4: String
  photo5: String
  thumbnail: String
  thumbnailSrc: String
  thumbnailCropper: String
  titlePadX: String
  titlePadY: String
  contentPadX: String
  contentPadY: String
  optionTitle: PageOptionTitle
  sideColumn: PageSideColumn
  sideColumnPadX: String
  sideColumnPadY: String
  sideColumnContent: String
  optionSideColumn: PageOptionSideColumn
  hideFooter: Boolean
  hideInMenu: Boolean
  createdAt: AWSDateTime
  search: String
  hideInSearch: Boolean
  options: [Option] @hasMany(indexName: "optionsByProduct", fields: ["id"])
  kitItems: [KitItem] @hasMany(indexName: "kitItemsByProduct", fields: ["id"])
}

type KitItem
  @model(
    mutations: {create: "createKitItem", update: null, delete: "deleteKitItem"},
    queries: {get: null, list: null},
    subscriptions: null
  )
  @auth(rules: [
    {allow: groups, provider: userPools, groups: ["Admin"]},
    {allow: private, provider: userPools, operations: [read]},
    {allow: public, provider: apiKey, operations: [read]}
  ]) {
  id: ID! @primaryKey
  productID: ID! @index(name: "kitItemsByProduct", queryField: "listKitItemsByProduct")
  kitItemProductID: ID!
  product: Product @hasOne(fields: ["kitItemProductID"])
}

type Option
  @model(
    mutations: {create: "createOption", update: "updateOption", delete: "deleteOption"},
    queries: {get: "getOption", list: "listOptions"},
    subscriptions: null
  )
  @auth(rules: [
    {allow: groups, provider: userPools, groups: ["Admin"]},
    {allow: private, provider: userPools, operations: [read]},
    {allow: public, provider: apiKey, operations: [read]}
  ]) {
  id: ID! @primaryKey
  productID: ID! @index(name: "optionsByProduct", queryField: "listOptionsByProduct")
  name: String
  price: Float
}

type Cart
  @model(
    mutations: {create: "createCart", update: "updateCart", delete: "deleteCart"},
    queries: {get: null, list: "listCarts"},
  )
  @auth(rules: [
    {allow: groups, provider: userPools, groups: ["Admin"]},
    {allow: owner, identityClaim: "username", provider: userPools, ownerField: "userID", operations: [create, update, delete, read]},
    {allow: public, provider: apiKey, operations: [read, update, create]}
  ]) {
  id: ID! @primaryKey
  userID: ID! @index(name: "cartsByUser", queryField: "listCartsByUser")
  productID: ID!
  product: Product @hasOne(fields: ["productID"])
  options: [CartOption] @hasMany(indexName: "optionsByCart", fields: ["id"])
  qty: Int
  changeName: String
  changeDescription: String
  changeQtyBlend: Int
  changePriceAdjustment: String
  blendID: ID
  campaignToken: String
}

type CartOption
  @model(
    mutations: {create: "createCartOption", update: "updateCartOption", delete: "deleteCartOption"},
    queries: {get: null, list: null},
    subscriptions: null
  )
  @auth(rules: [
    {allow: groups, provider: userPools, groups: ["Admin"]},
    {allow: owner, identityClaim: "username", provider: userPools, ownerField: "userID", operations: [create, update, delete, read]},
    {allow: public, provider: apiKey, operations: [read, update, create]}
  ]) {
  id: ID! @primaryKey
  cartID: ID! @index(name: "optionsByCart", queryField: "listOptionsByCart")
  optionID: ID!
  option: Option @hasOne(fields: ["optionID"])
}

enum OrderStatus {
  STANDBY
  CANCELED
  REJECTED
  APPROVED
  IN_PREPARATION
  IN_TRANSIT
  DELIVERED
}

type Order
  @model
  @auth(rules: [
    {allow: groups, provider: userPools, groups: ["Admin", "Clinica", "Profissional", "Colaborador"], operations: [create, update, delete, read]},
    {allow: owner, identityClaim: "username", provider: userPools, ownerField: "userID", operations: [create, update, delete, read]},
    {allow: public, provider: apiKey, operations: [read, update, create]}
  ]) {
  id: ID! @primaryKey
  userID: ID! @index(name: "ordersByUserStatusCreatedAt", sortKeyFields: ["status", "createdAt"], queryField: "listOrdersByUserStatusCreatedAt") @index(name: "ordersByUserCreatedAt", sortKeyFields: ["createdAt"], queryField: "listOrdersByUserCreatedAt")
  user: User @hasOne(fields: ["userID"])
  profile: Profile @hasOne(fields: ["userID"])
  status: OrderStatus! @index(name: "ordersByStatusCreatedAt", sortKeyFields: ["createdAt"], queryField: "listOrdersByStatusCreatedAt")
  createdAt: AWSDateTime
  items: [OrderItem] @hasMany(indexName: "itemsByOrder", fields: ["id"])
  couponID: ID
  couponName: String
  couponDiscount: Float
  deliveryPrice: Float
  total: Float
  rating: Int
  ratingNotes: String
  orderPagarmeID: String
  addressReference: String
  addressStreet: String
  addressNumber: String
  addressComplement: String
  addressZipcode: String
  addressNeighborhood: String
  addressCity: String
  addressState: String
  addressCountry: String
  notes: String
  campaignID: ID @index(name: "ordersByCampaignCreatedAt", sortKeyFields: ["createdAt"], queryField: "listOrdersByCampaignCreatedAt")
  campaignName: String
  campaignOrientation: String
  companyID: ID
  company: Company @hasOne(fields: ["companyID"])
  companyName: String
  companyPhone: AWSPhone
  companyOpeningHours: String
  qrCodePix: String
  qrCodePixUrl: String
  payMethod: PaymentMethods,
  installments: Int,
  homeCareOrRetail: String
  vaccinationCardItems: [VaccinationCardItem] @hasMany(indexName: "vaccinationCardsItemsByOrder", fields: ["id"])
}

type OrderItem
  @model(
    mutations: {create: "createOrderItem", update: "updateOrderItem", delete: "deleteOrderItem"},
    queries: {get: null, list: null},
    subscriptions: null
  )
  @auth(rules: [
    {allow: groups, provider: userPools, groups: ["Admin", "Clinica", "Profissional", "Colaborador"]},
    {allow: private, provider: userPools, operations: [read, update, create, delete]},
    {allow: public, provider: apiKey, operations: [read, update, create, delete]}
  ]) {
  id: ID! @primaryKey
  orderID: ID! @index(name: "itemsByOrder", queryField: "listItemsByOrder")
  productID: ID!
  product: Product @hasOne(fields: ["productID"])
  optionsItem: [OrderItemOption] @hasMany(indexName: "optionsByOrderItem", fields: ["id"])
  qty: Int!
  code: String
  name: String!
  description: String
  price: Float!
  photo1: String
  changeName: String
  changeDescription: String
  changeQtyBlend: Int
  changePriceAdjustment: String
  blendID: ID
  changeNameAdmin: String
}

type OrderItemOption
  @model(
    mutations: {create: "createOrderItemOption", update: "updateOrderItemOption", delete: "deleteOrderItemOption"},
    queries: {get: null, list: null},
    subscriptions: null
  )
  @auth(rules: [
    {allow: groups, provider: userPools, groups: ["Admin", "Clinica", "Profissional", "Colaborador"]},
    {allow: private, provider: userPools, operations: [read, update, create, delete]},
    {allow: public, provider: apiKey, operations: [read, update, create, delete]}
  ]) {
  id: ID! @primaryKey
  orderItemID: ID! @index(name: "optionsByOrderItem", queryField: "listOptionsByOrderItem")
  optionID: ID!
  option: Option @hasOne(fields: ["optionID"])
}

enum DeliveryStatus {
  FORESEEN
  NEEDS_ACTION
  CONFIRMED
  BLOCKED
  DELIVERED
}

type DeliveryOrder
  @model(
    mutations: {create: "createDeliveryOrder", update: "updateDeliveryOrder", delete: "deleteDeliveryOrder"},
    queries: {get: null, list: "listDeliveryOrders"},
    subscriptions: null
  )
  @auth(rules: [
    {allow: owner, identityClaim: "username", provider: userPools, ownerField: "deliveryUserID", operations: [create, update, delete, read]},
    {allow: groups, provider: userPools, groups: ["Admin", "Clinica", "Profissional", "Colaborador"]},
    {allow: public, provider: apiKey, operations: [read, update, create, delete]}
  ]) {
  id: ID! @primaryKey
  orderID: ID! @index(name: "deliveryByOrder", queryField: "listDeliveryByOrder")
  order: Order @hasOne(fields: ["orderID"])
  date: AWSDateTime! @index(name: "deliveryByDate", sortKeyFields: ["deliveryUserID"], queryField: "listDeliveryByDateUser")
  deliveryUserID: ID @index(name: "deliveryByUser", sortKeyFields: ["date"], queryField: "listDeliveryByUserDate")
  deliveryUser: User @hasOne(fields: ["deliveryUserID"])
  deliveryCompanyID: ID @index(name: "deliveryByCompany", sortKeyFields: ["date"], queryField: "listDeliveryByCompanyDate")
  deliveryCompany: Company @hasOne(fields: ["deliveryCompanyID"])
  status: DeliveryStatus! @index(name: "deliveryByStatusDate", sortKeyFields: ["date"], queryField: "listDeliveryByStatusDate")
}

type DeliveryMethodOrder
  @model(
    mutations: {create: "createDeliveryMethodOrder", update: "updateDeliveryMethodOrder", delete: "deleteDeliveryMethodOrder"},
    queries: {get: null, list: "listDeliveryMethodOrders"},
    subscriptions: null
  )
  @auth(rules: [
    {allow: groups, provider: userPools, groups: ["Admin", "Clinica", "Profissional", "Colaborador"]},
    {allow: private, provider: userPools, operations: [read]},
    {allow: public, provider: apiKey, operations: [read]}
  ]) {
  id: ID! @primaryKey
  name: String
  zipCode: [String]
  price: Float
}

type Notify
  @model(
    mutations: {create: "createNotify", update: "updateNotify", delete: "deleteNotify"},
    queries: {get: null, list: null},
    subscriptions: null)
  @auth(rules: [
    {allow: owner, identityClaim: "username", provider: userPools, ownerField: "userID"},
    {allow: public, provider: apiKey, operations: [create, delete]}
  ]) {
  id: ID! @primaryKey
  userID: ID! @index(name: "notifyByUserCreatedAt", queryField: "listNotifyByUserCreatedAt", sortKeyFields: ["createdAt"])
  createdAt: AWSDateTime
  content: String
  link: String
  viewed: Boolean
}


type Subscription {
  onDeleteRelationLink(userID: ID): RelationLink @aws_subscribe(mutations: ["deleteRelationLink"])
  onCreateRelationLink(userID: ID): RelationLink @aws_subscribe(mutations: ["createRelationLink"])
  onUpdateRelationLink(userID: ID): RelationLink @aws_subscribe(mutations: ["updateRelationLink"])
  onCreateMessage(relationID: ID): Message @aws_subscribe(mutations: ["createMessage"])
  onCreateOrderAdm: Order @aws_subscribe(mutations: ["createOrder"])
  onCreateLog: Log @aws_subscribe(mutations: ["createLog"])
  onCreateNotify(userID: ID): Notify @aws_subscribe(mutations: ["createNotify"])
  onUpdateClient(clientID: ID): Client @aws_subscribe(mutations: ["updateClient"])
}

type Mutation @aws_api_key @aws_cognito_user_pools {
  adminDeleteUser(id: String): String @function(name: "AdminDeleteUser-${env}")
  adminCreateUser(name: String, email: String, phone: String, id: String, messageAction: String, passwordLength: Int, resendTempPass: Int, confirmSignUp: Int): String @function(name: "AdminCreateUser-${env}")
  adminAddUserToGroup(username: String, groups: String): String @function(name: "AdminAddUserToGroup-${env}")
  adminUpdateUserAttributes(username: String, attributes: String): String @function(name: "AdminUpdateUserAttributes-${env}")
}


type Campaign
  @model(
    mutations: {create: "createCampaign", update: "updateCampaign", delete: "deleteCampaign"},
    queries: {get: "getCampaign", list: "listCampaigns"},
    subscriptions: null
  )
  @auth(rules: [
    {allow: groups, provider: userPools, groups: ["Admin", "Clinica", "Profissional", "Colaborador"]},
    {allow: private, provider: userPools, operations: [read]},
    {allow: public, provider: apiKey, operations: [read, update]}
  ]) {
  id: ID! @primaryKey
  name: String!
  description: String
  code: String! @index(name: "campaignByCode", queryField: "listCampaignByCode")
  start: AWSDate
  expiration: AWSDate
  discountPercentage: Int
  discountValue: Float
  qtyLimit: Int
  qtyUsed: Int
  qtyProduct: Int
  qtyProductUsed: Int
  orientation: String
  orderMessage: String
  zipCodeCoverage: [String]
  search: String
  products: [CampaignProduct] @hasMany(indexName: "productsByCampaign", fields: ["id"])
  campaignUsed: [CampaignUsed] @hasMany(indexName: "usedByCampaign", fields: ["id"])
  companies: [CampaignCompany] @hasMany(indexName: "companiesByCampaign", fields: ["id"])
}

type CampaignUsed
  @model(
    mutations: {create: "createCampaignUsed", update: null, delete: null},
    queries: {get: null, list: null},
    subscriptions: null
  )
  @auth(rules: [
    {allow: groups, provider: userPools, groups: ["Admin"]},
    {allow: owner, identityClaim: "username", provider: userPools, ownerField: "userID", operations: [create, update, delete, read]},
    {allow: private, provider: userPools, operations: [read]},
    {allow: public, provider: apiKey, operations: [read, create]}
  ]) {
  id: ID! @primaryKey
  campaignID: ID! @index(name: "usedByCampaign", queryField: "listUsedByCampaign") @index(name: "usedByCampaignUser", queryField: "listUsedByCampaignUser", sortKeyFields: ["userID"])
  campaign: Campaign @belongsTo(fields: ["campaignID"])
  userID: ID!
  user: User @hasOne(fields: ["userID"])
  qty: Int
}

type CampaignProduct
  @model(
    mutations: {create: "createCampaignProduct", update: "updateCampaignProduct", delete: "deleteCampaignProduct"},
    queries: {get: null, list: null},
    subscriptions: null
  )
  @auth(rules: [
    {allow: groups, provider: userPools, groups: ["Admin"]},
    {allow: private, provider: userPools, operations: [read]},
    {allow: public, provider: apiKey, operations: [read, update, create, delete]}
  ]) {
  id: ID! @primaryKey
  campaignID: ID! @index(name: "productsByCampaign", queryField: "listProductsByCampaign")
  productID: ID!
  price: Float
  limit: Int
  product: Product @hasOne(fields: ["productID"])
}


type CampaignCompany
  @model(
    mutations: {create: "createCampaignCompany", update: "updateCampaignCompany", delete: "deleteCampaignCompany"},
    queries: {get: null, list: null},
    subscriptions: null
  )
  @auth(rules: [
    {allow: groups, provider: userPools, groups: ["Admin", "Clinica", "Profissional", "Colaborador"]},
    {allow: private, provider: userPools, operations: [read]},
    {allow: public, provider: apiKey, operations: [read, update, create, delete]}
  ]) {
  id: ID! @primaryKey
  campaignID: ID! @index(name: "companiesByCampaign", queryField: "listCompaniesByCampaign")
  companyID: ID!
  company: Company @hasOne(fields: ["companyID"])
}


type VaccinationCard
  @model(
    mutations: {create: "createVaccinationCard", update: "updateVaccinationCard", delete: "deleteVaccinationCard"},
    queries: {get: "getVaccinationCard", list: null},
    subscriptions: null
  )
  @auth(rules: [
    {allow: owner, identityClaim: "username", provider: userPools, ownerField: "userID", operations: [create, update, delete, read]},
    {allow: groups, provider: userPools, groups: ["Admin", "Clinica", "Profissional", "Colaborador"], operations: [read, update, create, delete]},
    ]) {
  id: ID! @primaryKey
  userID: ID! @index(name: "vaccinationCardsByUser", queryField: "listVaccinationCardsByUser")
  person: String!
  doc: String
  birth: AWSDate
  relationship: String
  notes: String
  avatar: String
  isOwner: Boolean
  vaccinationCardItem: [VaccinationCardItem] @hasMany(indexName: "vaccinationCardsItemsByVaccinationCard", fields: ["id"])
}

type VaccinationCardItem
  @model(
    mutations: {create: "createVaccinationCardItem", update: "updateVaccinationCardItem", delete: "deleteVaccinationCardItem"},
    queries: {get: null, list: "listVaccinationCardItems"},
    subscriptions: null
  )
  @auth(rules: [
    {allow: owner, identityClaim: "username", provider: userPools, ownerField: "userID", operations: [create, update, delete, read]},
    {allow: groups, provider: userPools, groups: ["Admin", "Clinica", "Profissional", "Colaborador"], operations: [read, update, create, delete]},
    {allow: public, provider: apiKey, operations: [create]}
    ]) {
  id: ID! @primaryKey
  vaccinationCardID: ID! @index(name: "vaccinationCardsItemsByVaccinationCard", queryField: "listVaccinationCardsItemsByVaccinationCard")
  vaccinationCard: VaccinationCard @hasOne(fields: ["vaccinationCardID"])
  orderID: ID! @index(name: "vaccinationCardsItemsByOrder", queryField: "listVaccinationCardsItemsByOrder")
  order: Order @hasOne(fields: ["orderID"])
  orderItemID: ID!
  orderItem: OrderItem @hasOne(fields: ["orderItemID"])
  campaignID: ID @index(name: "vaccinationCardsItemsByCampaign", sortKeyFields: ["applicationDate"], queryField: "listVaccinationCardsItemsByCampaign")
  campaign: Campaign @hasOne(fields: ["campaignID"])
  companyID: ID @index(name: "vaccinationCardsItemsByCompany", sortKeyFields: ["applicationDate"], queryField: "listVaccinationCardsItemsByCompany")
  company: Company @hasOne(fields: ["companyID"])
  lote: String
  profissionalID: ID @index(name: "vaccinationCardsItemsByProfissional", sortKeyFields: ["applicationDate"], queryField: "listVaccinationCardsItemsByProfissional")
  profissional: User @hasOne(fields: ["profissionalID"])
  profissionalName: String
  coren: String
  dueDate: AWSDate
  via: String
  applicationDate: AWSDate
  status: String @index(name: "vaccinationCardsItemsByStatus", sortKeyFields: ["applicationDate"], queryField: "listVaccinationCardsItemsByStatus")
}

enum CompanyStatus {
  ON
  OFF
}

type Company
  @model(
    mutations: {create: "createCompany", update: "updateCompany", delete: "deleteCompany"},
    queries: {get: "getCompany", list: "listCompanies"},
    subscriptions: null
  )
  @auth(rules: [
    {allow: groups, provider: userPools, groups: ["Admin", "Clinica", "Profissional", "Colaborador"]},
    {allow: private, provider: userPools, operations: [read]},
    {allow: public, provider: apiKey, operations: [read]}
    ]) {
  id: ID! @primaryKey
  cnpj: String! @index(name: "companyByCNPJ", queryField: "listCompanyByCNPJ")
  name: String!
  openingHours: String
  phones: String
  street: String
  number: String
  complement: String
  zipcode: String
  neighborhood: String
  city: String
  state: String
  country: String
  search: String
  enableRetail: String @index(name: "companyByEnableRetail", queryField: "listCompanyByEnableRetail")
  schedulesSunday: [String]
  schedulesMonday: [String]
  schedulesTuesday: [String]
  schedulesWednesday: [String]
  schedulesThursday: [String]
  schedulesFriday: [String]
  schedulesSaturday: [String]
  status: CompanyStatus
}

enum AuthorizationListStatus {
  STANDBY
  STARTED
  FINISHED
}

type AuthorizationList
  @model(
    mutations: {create: "createAuthorizationList", update: "updateAuthorizationList", delete: "deleteAuthorizationList"},
    queries: {get: null, list: "listAuthorizationList"},
    subscriptions: null
  )
  @auth(rules: [
    {allow: groups, provider: userPools, groups: ["Admin", "Clinica", "Profissional", "Colaborador"], operations: [create, update, delete, read]},
    {allow: public, provider: apiKey, operations: [read]}
    ]) {
  id: ID! @primaryKey
  name: String!
  description: String
  start: AWSDate
  expiration: AWSDate
  orientation: String
  search: String
  qtyApplication: Int
  qtyReturned: Int
  contactNameFinished: String
  contactPhoneFinished: String
  contactEmailFinished: String
  notesFinished: String
  professionalFinished: ID
  withList: Boolean
  campaignCode: String @index(name: "authorizationListByCampaignCode", queryField: "listAuthorizationListsByCampaignCode")
  OS: String
  status: AuthorizationListStatus @index(name: "authorizationListsByStatus", queryField: "listAuthorizationListsByStatus")
  members: [AuthorizationListMember] @hasMany(indexName: "membersByAuthorizationList", fields: ["id"])
}

type AuthorizationListClosure
  @model(
    mutations: {create: "createAuthorizationListClosure", update: "updateAuthorizationListClosure", delete: "deleteAuthorizationListClosure"},
    queries: {get: null, list: null},
    subscriptions: null
  )
  @auth(rules: [
    {allow: groups, provider: userPools, groups: ["Admin", "Clinica", "Profissional", "Colaborador"], operations: [create, update, delete, read]},
    {allow: public, provider: apiKey, operations: [read]}
  ]) {
  id: ID! @primaryKey
  authorizationListID: ID!
    @index(name: "closuresByAuthorizationList", queryField: "listClosuresByAuthorizationList", sortKeyFields: ["createdAt"])
  contactName: String
  contactPhone: String
  contactEmail: String
  notes: String
  qtyApplication: Int
  qtyReturned: Int
  professionalID: ID
  OS: String
  createdAt: AWSDateTime
}

type AuthorizationListMember
  @model(
    mutations: {create: "createAuthorizationListMember", update: "updateAuthorizationListMember", delete: "deleteAuthorizationListMember"},
    queries: {get: null, list: "listAuthorizationListMembers"},
    subscriptions: null
  )
  @auth(rules: [
    {allow: groups, provider: userPools, groups: ["Admin", "Clinica", "Profissional", "Colaborador"], operations: [create, update, delete, read]},
    {allow: public, provider: apiKey, operations: [read, update]}
  ]) {
  id: ID! @primaryKey
  authorizationListID: ID!
    @index(name: "membersByAuthorizationList", queryField: "listMembersByAuthorizationList")
    @index(name: "membersByAuthorizationListKey", queryField: "listMembersByAuthorizationListKey", sortKeyFields: ["key"])
    @index(name: "membersByAuthorizationListCPF", queryField: "listMembersByAuthorizationListCPF", sortKeyFields: ["cpf"])
  name: String!
  key: String @index(name: "membersByKey", queryField: "listMembersByKey")
  cpf: String @index(name: "membersByCPF", queryField: "listMembersByCPF")
  birth: String
  search: String
  others: String
  vaccinations: [AuthorizationListMemberVaccination] @hasMany(indexName: "vaccinationsByAuthorizationListMember", fields: ["id"])
  authorizationList: AuthorizationList @hasOne(fields: ["authorizationListID"])
}

type AuthorizationListMemberVaccination
  @model(
    mutations: {create: "createAuthorizationListMemberVaccination", update: "updateAuthorizationListMemberVaccination", delete: "deleteAuthorizationListMemberVaccination"},
    queries: {get: null, list: null},
    subscriptions: null
  )
  @auth(rules: [
    {allow: groups, provider: userPools, groups: ["Admin", "Clinica", "Profissional", "Colaborador"], operations: [create, update, delete, read]},
    {allow: public, provider: apiKey, operations: [create, update, delete, read]}
  ]) {
  id: ID! @primaryKey
  authorizationListID: ID! @index(name: "membersVaccinationByAuthorizationList", queryField: "listMembersVaccinationByAuthorizationList")
  authorizationList: AuthorizationList @hasOne(fields: ["authorizationListID"])
  authorizationListMemberID: ID! @index(name: "vaccinationsByAuthorizationListMember", queryField: "listVaccinationsByAuthorizationListMember")
  authorizationListMember: AuthorizationListMember @hasOne(fields: ["authorizationListMemberID"])
  profissionalID: ID @index(name: "vaccinationsByProfissional", sortKeyFields: ["applicationDate"], queryField: "listVaccinationsByProfissional")
  profissional: User @hasOne(fields: ["profissionalID"])
  coren: String
  lote: String
  dueDate: AWSDate
  via: String
  OS: String
  applicationDate: AWSDate
  applicationTime: AWSTime
}

type Counter
  @model(
    mutations: {create: "createCounter", update: "updateCounter", delete: "deleteCounter"},
    queries: {get: "getCounter", list: null},
    subscriptions: null
  )
  @auth(rules: [
    {allow: public, provider: apiKey, operations: [create, update, delete, read]}
    ]) {
  id: String! @primaryKey
  qty: Int!
}

enum ClientStatus {
  ACTIVE
  SUSPENDED
}

type Client
  @model(
    mutations: {create: "createClient", update: "updateClient", delete: "deleteClient"},
    queries: {get: "getClient", list: "listClients"},
    subscriptions: null
    )
  @auth(rules: [
    {allow: groups, provider: userPools, groups: ["Admin"], operations: [create, update, delete, read]},
    {allow: public, provider: apiKey, operations: [read]}
  ]) {
  id: ID! @primaryKey
  name: String!
  notes: String
  status: ClientStatus! @index(name: "clientsByStatusName", queryField: "listClientsByStatusName", sortKeyFields: ["name"])
  search: String
  totalUnits: Int
  unitsServed: Int
  unitsExpected: Int
  firstOSDate: AWSDate
  lastOSDate: AWSDate
  scheduleRouted: Int
  scheduleConfirmed: Int
  schedulePending: Int
  totalEligibles: Int
  totalVaccinations: Int
  PercentAdherence: Float
  code: String @index(name: "clientsByCode", queryField: "listClientsByCode")
  units: [ClientUnit] @hasMany(indexName: "unitsByClient", fields: ["id"])
  eligibles: [ClientEligible] @hasMany(indexName: "eligiblesByClient", fields: ["id"])
  oss: [OS] @hasMany(indexName: "ossByClient", fields: ["id"])
}

type ClientUser
  @model(
    mutations: {create: "createClientUser", update: null, delete: "deleteClientUser"},
    queries: {get: null, list: null},
    subscriptions: null)
  @auth(rules: [
    {allow: groups, provider: userPools, groups: ["Admin"], operations: [create, update, delete, read]},
    {allow: owner, identityClaim: "username", provider: userPools, ownerField: "userID"},
    {allow: public, provider: apiKey, operations: [create, delete, update, read]}
  ]) {
  id: ID! @primaryKey
  userID: ID!
    @index(
      name: "clientUserByUser",
      queryField: "listClientUserByUser"
    )
  user: User @hasOne(fields: ["userID"])
  clientID: ID!
    @index(
      name: "clientUserByClient",
      queryField: "listClientUserByClient",
      sortKeyFields: ["userID"]
    )
  client: Client @hasOne(fields: ["clientID"])
}

type ClientUnit
  @model(
    mutations: {create: "createClientUnit", update: "updateClientUnit", delete: "deleteClientUnit"},
    queries: {get: null, list: null},
    subscriptions: null
  )
  @auth(rules: [
    {allow: groups, provider: userPools, groups: ["Admin"], operations: [create, update, delete, read]},
    {allow: public, provider: apiKey, operations: [read]}
  ]) {
  id: ID! @primaryKey
  clientID: ID! @index(name: "unitsByClient", queryField: "listUnitsByClient")
  name: String
  street: String
  number: String
  complement: String
  zipcode: String
  neighborhood: String
  city: String
  state: String
  country: String
  notes: String
  search: String
  contactName: String
  contactEmail: AWSEmail
  contactPhone: AWSPhone
  code: String @index(name: "unitsByCode", queryField: "listUnitsByCode")
  oss: [OS] @hasMany(indexName: "ossByClientUnit", fields: ["id"])
}

type ClientEligible
  @model(
    mutations: {create: "createClientEligible", update: "updateClientEligible", delete: "deleteClientEligible"},
    queries: {get: null, list: null},
    subscriptions: null
  )
  @auth(rules: [
    {allow: groups, provider: userPools, groups: ["Admin"], operations: [create, update, delete, read]},
    {allow: public, provider: apiKey, operations: [read]}
  ]) {
  id: ID! @primaryKey
  clientID: ID!
    @index(name: "eligiblesByClient", queryField: "listEligiblesByClient")
    @index(name: "eligiblesByClientKey", queryField: "listEligiblesByClientKey", sortKeyFields: ["key"])
    @index(name: "eligiblesByClientCPF", queryField: "listEligiblesByClientCPF", sortKeyFields: ["cpf"])
    @index(name: "eligiblesByClientRG", queryField: "listEligiblesByClientRG", sortKeyFields: ["rg"])
  key: String!
  name: String
  cpf: String
  rg: String
  birth: String
  notes: String
  search: String
  relationship: String
}

enum OSStatus {
  STANDBY
  STARTED
  FINISHED
  CONFIRMED
  CANCELED
  ROUTED
}

type OS
  @model(
    mutations: {create: "createOS", update: "updateOS", delete: "deleteOS"},
    queries: {get: null, list: "listOSs"},
    subscriptions: null
  )
  @auth(rules: [
    {allow: groups, provider: userPools, groups: ["Admin", "Clinica", "Profissional", "Colaborador"], operations: [create, update, delete, read]},
    {allow: public, provider: apiKey, operations: [read, update, create, delete]}
    ]) {
  id: ID! @primaryKey
  clientID: ID! @index(name: "ossByClient", queryField: "listOSsByClient")
  clientUnitID: ID! @index(name: "ossByClientUnit", queryField: "listOSsByClientUnit")
  driverID: ID
  professionals: [ID!]!
  collaborators: [ID!]
  number: Int! @index(name: "ossByNumber", queryField: "listOSsByNumber")
  start: AWSDateTime
  expiration: AWSDateTime
  orientation: String
  notes: String
  status: OSStatus! @index(name: "ossByStatusNumber", queryField: "listOSsByStatusNumber", sortKeyFields: ["number"])
  allowOffList: Boolean
  withList: Boolean
  vaccination: String
  qtyApplication: Int
  dateStarted: AWSDateTime
  dateFinished: AWSDateTime
  professionalStarted: ID
  professionalFinished: ID
  notesStarted: String
  notesFinished: String
  clientNameStarted: String
  clientNameFinished: String
  unitNameFinished: String
  contactNameFinished: String
  contactDocFinished: String
  contactCRMFinished: String
  contactEmailFinished: String
  stayVaccines: Boolean
  stayQtd: Int
  lat: Float
  lng: Float
  eligiblesVaccination: [EligibleVaccination] @hasMany(indexName: "eligiblesVaccinationByClientEligible", fields: ["id"])
  client: Client @hasOne(fields: ["clientID"])
  clientUnit: ClientUnit @hasOne(fields: ["clientUnitID"])
}

enum EligibleVaccinationStatus {
  CANCELED
  APPLIED
}

type EligibleVaccination
  @model(
    mutations: {create: "createEligibleVaccination", update: "updateEligibleVaccination", delete: "deleteEligibleVaccination"},
    queries: {get: null, list: null},
    subscriptions: null
  )
  @auth(rules: [
    {allow: groups, provider: userPools, groups: ["Admin", "Clinica", "Profissional", "Colaborador"], operations: [create, update, delete, read]},
    {allow: public, provider: apiKey, operations: [read]}
  ]) {
  id: ID! @primaryKey
  osID: ID! @index(name: "eligiblesVaccinationByOS", queryField: "listEligiblesVaccinationByOS")
  clientEligibleID: ID! @index(name: "eligiblesVaccinationByClientEligible", queryField: "listEligiblesVaccinationByClientEligible")
  clientEligible: ClientEligible @hasOne(fields: ["clientEligibleID"])
  profissionalID: ID
  profissional: User @hasOne(fields: ["profissionalID"])
  coren: String
  applicationDate: AWSDateTime
  reason: String
  vaccination: String
  status: EligibleVaccinationStatus
  localCity: String
  localState: String
}
